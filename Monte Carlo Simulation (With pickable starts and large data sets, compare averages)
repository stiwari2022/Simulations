One_And_Two=[1, -1]





import random
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(13, 5))
print ("Monte Carlo Simulation")
Chubster=int(input("Enter the number of simulations for all lists: "))
Chub_Dot_Com=int(input("Enter the average number of lines in a line for all lists: "))
print("\n")
def Chub(Chubingle, Chubstering, Les_Chub):
























































  def Average(AND_and_OR):
    return sum(AND_and_OR)/len(AND_and_OR)
  Jeb=0
  Big=[]
  Chubni=1
  while (Jeb<Chubni):
    Mere_List=[]
    Lisp=[]
    Lispin=[]
    a=0
    b=0
    c=0
    d=0
    e=0
    f=0
    g=0
    h=0
    i=0
    j=0
    k=0
    l=0
    m=0
    n=0
    o=0
    p=0
    q=0
    r=0
    s=0
    t=0
    u=0
    v=0
    w=0
    x=0
    y=0
    z=0
    aa=0
    qa=0
    sa=0
    xa=0
    ya=0
    Jeb=Jeb+1
    while (q<Chub_Dot_Com):
      q=q+1
      g=random.choice(Chubstering)
      Lisp.append(g)
      x=Average(Lisp)
    a=100+x
    b=a/100
    x=Les_Chub*b
    Mere_List.append(x)
    while (z<Chubster-1):
      while (qa<Chub_Dot_Com):
        qa=qa+1
        ga=random.choice(Chubstering)
        Lispin.append(ga)
        xa=Average(Lispin)
      ya=Chubstering[-1]
      aa=100+xa
      ba=aa/100
      sa=Mere_List[-1]*ba
      Mere_List.append(sa)
      z=z+1
      i=Mere_List[-1]
    print ("{}:".format(Chubingle))
    print (Mere_List)
    plt.plot(Mere_List, label=Chubingle)
    Big.append(i)
  Big_Chub=Average(Big)
  print ("Average Endpoint: {}\n\n".format(Big_Chub))
Chub("One_And_Two", One_And_Two, 1000)
plt.legend()
