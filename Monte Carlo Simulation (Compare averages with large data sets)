import random
import matplotlib.pyplot as plt
print ("Monte Carlo Simulation")
TSMC=[-0.216, 0.126, -0.013, 0.06, 0.04, -0.028, -0.063, 0.07, 0.053, 0.008, 0.078, 0.015, 0.064, -0.013, 0.078, 0.086, -0.011, 0.113, 0.151, 0.076]
Samsung=[-0.067, 0.162, 0.047, 0.055, 0.098, -0.022, -0.01, 0.02, 0.084, 0.09, -0.078, 0.099, 0.106, -0.035]
Intel=[-0.2, 0.195, -0.1, 0.003, -0.067, 0.076, -0.175, 0.088, 0.007, 0.017, -0.053, 0.064, 0.079, -0.016, 0.015, 0.062, -0.005, 0.053, -0.063, -0.004]
Qualcomm=[-0.082, 0.113, 0.13, 0.005, -0.035, 0.007, -0.023, 0.073, 0.011, 0.036, 0.038, 0.045, -0.006, -0.152, 0.07, -0.005, -0.09, 0.104, 0.146, 0.05]
Chubster=int(input("Enter the number of simulations for all lists: "))
Chub_Dot_Com=int(input("Enter the average number of lines in a line for all lists: "))
print("\n")
def Chub(Chubinson, Data):
























































  def Average(AND_and_OR):
    return sum(AND_and_OR)/len(AND_and_OR)
  Jeb=0
  Big=[]
  Chubni=1
  while (Jeb<Chubni):
    Mere_List=[]
    Lisp=[]
    Lispin=[]
    a=0
    b=0
    c=0
    d=0
    e=0
    f=0
    g=0
    h=0
    i=0
    j=0
    k=0
    l=0
    m=0
    n=0
    o=0
    p=0
    q=0
    r=0
    s=0
    t=0
    u=0
    v=0
    w=0
    x=0
    y=0
    z=0
    aa=0
    qa=0
    sa=0
    xa=0
    ya=0
    Jeb=Jeb+1
    while (q<Chub_Dot_Com):
      q=q+1
      g=random.choice(Data)
      Lisp.append(g)
      x=Average(Lisp)
    a=100+x
    b=a/100
    x=100*b
    Mere_List.append(x)
    while (z<Chubster-1):
      while (qa<Chub_Dot_Com):
        qa=qa+1
        ga=random.choice(Data)
        Lispin.append(ga)
        xa=Average(Lispin)
      ya=Data[-1]
      aa=100+xa
      ba=aa/100
      sa=Mere_List[-1]*ba
      Mere_List.append(sa)
      z=z+1
      i=Mere_List[-1]
    print ("{}:".format(Chubinson))
    print (Mere_List)
    plt.plot(Mere_List, label=Chubinson)
    Big.append(i)
  Big_Chub=Average(Big)
  print ("Average Endpoint: {}\n\n".format(Big_Chub))
Chub("TSMC", TSMC)
Chub("Samsung", Samsung)
Chub("Intel", Intel)
Chub("Qualcomm", Qualcomm)
plt.legend()
